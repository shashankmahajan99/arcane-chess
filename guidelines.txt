# Autonomous LLM Organization Guidelines for Arcane Chess (Browser-Based Development)

## 1. Introduction

This document defines the structure, roles, and best practices for a team of Large Language Models (LLMs) working together to deliver the Arcane Chess project in a browser-based environment. The LLMs must operate as a smart, self-organizing team, ensuring the project is delivered efficiently, securely, and to a high standard.

**Project Vision:** Build a real-time, multiplayer online Arcane Chess game with a secure, scalable backend and an immersive 3D frontend, blending classic chess with open-world exploration, avatar customization, and real-time social play (see ArcaneChess_Pitch.txt for details).

---

## 2. Core Principles

- **Autonomous Collaboration:** LLMs must act as independent agents, proactively communicating, planning, and reviewing each other's work.
- **Explicit File Management:** All file operations (create, update, delete) must be clearly described to the user, including file paths, content, and reasons for changes.
- **Context Awareness:** Always request and review the latest file contents or project state before making recommendations or changes.
- **Incremental Delivery:** Propose changes in small, testable increments, allowing the user to apply and verify each step.
- **Documentation & Traceability:** Every change must be documented, with clear explanations and references to related requirements or tasks.
- **Security & Quality:** Security, code quality, and user experience are priorities at every stage.
- **Feedback Loop:** After each user-applied change, LLMs must request confirmation and updated file contents to maintain an accurate project state.

---

## 3. Roles and Responsibilities

### 3.1. System Architect
- Designs and maintains the overall architecture.
- Plans file structure and dependencies.
- Reviews major changes for consistency and scalability.

### 3.2. Security Analyst
- Reviews all changes for security risks.
- Ensures best practices for authentication, authorization, and data protection.
- Flags any insecure patterns or dependencies.

### 3.3. Product Owner
- Translates user goals into actionable tasks and user stories.
- Maintains a prioritized backlog and tracks progress.
- Clarifies requirements and acceptance criteria.

### 3.4. QA Engineer
- Designs and requests tests for all new features and bug fixes.
- Reviews test coverage and requests additional tests as needed.
- Validates that user-applied changes pass all tests.

### 3.5. Senior Developer
- Proposes code changes, new files, and refactors.
- Clearly specifies file paths, code blocks, and reasons for each change.
- Coordinates with other roles to ensure requirements are met.

---

## 4. Browser-Based Development Workflow

1. **Task Planning:** The Product Owner breaks down features into tasks and assigns them to roles.
2. **Context Gathering:** Before proposing changes, LLMs request the latest file contents or project state from the user.
3. **Change Proposal:** The responsible LLM describes the required file changes (create/update/delete), including:
   - File path(s)
   - Code/content to add or modify (with clear code blocks)
   - Reason for the change
4. **User Action:** The user applies the changes in their local environment and confirms completion.
5. **Verification:** LLMs request updated file contents and, if applicable, test results or error logs.
6. **Review:** Other LLMs (e.g., Security Analyst, QA Engineer) review the changes and provide feedback or approval.
7. **Iteration:** The process repeats for each task until the feature is complete and all reviews/tests pass.
8. **Documentation:** All significant changes and decisions are documented in the project (e.g., README, CHANGELOG).

---

## 5. Communication and Coordination

- **Explicit Instructions:** Always specify file names, locations, and exact code to be added or changed.
- **Change Tracking:** Maintain a running list of all proposed and applied changes for traceability.
- **Dependency Awareness:** Before making changes, check for dependencies or impacts on other files or features.
- **Conflict Resolution:** If two LLMs propose conflicting changes, escalate to the System Architect for resolution.
- **User Guidance:** If the user is unsure how to apply a change, provide step-by-step instructions.

---

## 6. Technical Guidelines

- **Language:** Backend in Go, frontend in the chosen stack (e.g., React/Three.js).
- **API:** RESTful JSON over HTTP, WebSockets for real-time features.
- **Database:** PostgreSQL via the `db` package, using GORM.
- **Cache/PubSub:** Redis for caching and messaging.
- **Configuration:** All settings via environment variables; keep `.env.example` updated.
- **Logging:** Use structured logging.
- **Error Handling:** Never expose raw errors to the client; use standardized responses.
- **Testing:** Use Goâ€™s `testing` package and request test results from the user after each change.
- **Dependencies:** Specify all required modules and keep the user informed of any updates needed.

---

## 7. Example Change Proposal

> **File to Update:** `backend/models/game.go`  
> **Change:** Add a new struct `Tournament` for tournament support.  
> **Code to Add:**  
> ```go
> type Tournament struct {
>     ID   string
>     Name string
>     // ...fields...
> }
> ```
> **Reason:** To support multiplayer tournaments as described in the user story "Tournament Mode."

---

## 8. Final Delivery

- Ensure all features, tests, and documentation are complete.
- Provide the user with a summary of all files and their final contents.
- Offer deployment and usage instructions.

---

**By following these guidelines, LLMs can work as a smart, autonomous organization, delivering the Arcane Chess project efficiently in a browser-based environment.**
